{"ast":null,"code":"import _toConsumableArray from\"/home/arthur/cs/projects/reactJS/currex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/arthur/cs/projects/reactJS/currex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import CurrencyRow from'./CurrencyRow';import{Container,Row,Col}from'react-bootstrap';import'./Currency.css';//API Exchange rates\nvar BASE_URL='https://api.exchangeratesapi.io/latest';/* \nCurrency Component\nCurrency is the parent of CurrencyRow\n\nCurrency render the whole proccess of the currency conversion\n\nThe organisation of the Component is  : \n\nDefining our Currency options as useState to manipulate the state undirectly.\n\nDefining toAmount from Amount think os this line \"toAmount = amount * exchangeRate\" \nSo you understand what define amount mean \n\nFetching the data from the API URL \nUnpacking the data and distribute the options from our data\n\nThen converting amount in both way depending of the input \nI use hooks useEffect() here more about it \nHooks *** https://reactjs.org/docs/hooks-effect.html ***\n\nSince this component is the parent bootstrap modules are imported to make the \ncode shorter and cleaner\n\n*/function Currency(){// set currency options\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),currencyOptions=_useState2[0],setCurrencyOptions=_useState2[1];// from our current currency option\nvar _useState3=useState(),_useState4=_slicedToArray(_useState3,2),fromCurrency=_useState4[0],setFromCurrency=_useState4[1];// to another currency options\nvar _useState5=useState(),_useState6=_slicedToArray(_useState5,2),toCurrency=_useState6[0],setToCurrency=_useState6[1];// then echange rate from our option to other option\nvar _useState7=useState(),_useState8=_slicedToArray(_useState7,2),exchangeRate=_useState8[0],setExchangeRate=_useState8[1];// amount define (input)\nvar _useState9=useState(1),_useState10=_slicedToArray(_useState9,2),amount=_useState10[0],setAmount=_useState10[1];// Display amount in From our currency tocurrency\nvar _useState11=useState(true),_useState12=_slicedToArray(_useState11,2),amountInFromCurrency=_useState12[0],setAmountInFromCurrency=_useState12[1];// to amout -> to other option + echange rate = * \n// opposite way same by divide\nvar toAmount,fromAmount;if(amountInFromCurrency){fromAmount=amount;toAmount=amount*exchangeRate;}else{toAmount=amount;fromAmount=amount/exchangeRate;}// fetch data from our BASE_URL convert the res as json\n// then define each options unpacking the data\nuseEffect(function(){fetch(BASE_URL).then(function(res){return res.json();}).then(function(data){var firstCurrency=Object.keys(data.rates)[1];// 1 in the array = EU\nsetCurrencyOptions([data.base].concat(_toConsumableArray(Object.keys(data.rates))));setFromCurrency(data.base);setToCurrency(firstCurrency);setExchangeRate(data.rates[firstCurrency]);});},[]);// need to be nested in if statement otherwise fromCurrency And to Currency = not defined by compiler\nuseEffect(function(){if(fromCurrency!=null&&toCurrency!=null){fetch(\"\".concat(BASE_URL,\"?base=\").concat(fromCurrency,\"&symbols=\").concat(toCurrency)).then(function(res){return res.json();}).then(function(data){return setExchangeRate(data.rates[toCurrency]);});}},[fromCurrency,toCurrency]);function handleFromAmountChange(e){setAmount(e.target.value);setAmountInFromCurrency(true);}function handleToAmountChange(e){setAmount(e.target.value);setAmountInFromCurrency(false);}return/*#__PURE__*/React.createElement(Container,{className:\"CurrencyRow-wrapper\"},/*#__PURE__*/React.createElement(Row,{className:\"CurrencyRow-bg\"},/*#__PURE__*/React.createElement(Col,{sm:12,className:\"d-flex justify-content-center align-items-center \"},/*#__PURE__*/React.createElement(\"div\",{id:\"CurrencyRow-subWrapper\",className:\"\"},/*#__PURE__*/React.createElement(CurrencyRow,{currencyOptions:currencyOptions,selectedCurrency:fromCurrency,onChangeCurrency:function onChangeCurrency(e){return setFromCurrency(e.target.value);}// check your stackoverflow answer\n,onChangeAmount:handleFromAmountChange,amount:fromAmount}),/*#__PURE__*/React.createElement(\"div\",{className:\"equals\"},\"=\"),/*#__PURE__*/React.createElement(CurrencyRow,{currencyOptions:currencyOptions,selectedCurrency:toCurrency,onChangeCurrency:function onChangeCurrency(e){return setToCurrency(e.target.value);},onChangeAmount:handleToAmountChange,amount:toAmount})))));}export default Currency;","map":{"version":3,"sources":["/home/arthur/cs/projects/reactJS/currex/src/component/CurrencyRow/Currency.js"],"names":["React","useEffect","useState","CurrencyRow","Container","Row","Col","BASE_URL","Currency","currencyOptions","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","amount","setAmount","amountInFromCurrency","setAmountInFromCurrency","toAmount","fromAmount","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","handleFromAmountChange","e","target","value","handleToAmountChange"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport CurrencyRow from './CurrencyRow'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './Currency.css'\n//API Exchange rates\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\n/* \nCurrency Component\nCurrency is the parent of CurrencyRow\n\nCurrency render the whole proccess of the currency conversion\n\nThe organisation of the Component is  : \n\nDefining our Currency options as useState to manipulate the state undirectly.\n\nDefining toAmount from Amount think os this line \"toAmount = amount * exchangeRate\" \nSo you understand what define amount mean \n\nFetching the data from the API URL \nUnpacking the data and distribute the options from our data\n\nThen converting amount in both way depending of the input \nI use hooks useEffect() here more about it \nHooks *** https://reactjs.org/docs/hooks-effect.html ***\n\nSince this component is the parent bootstrap modules are imported to make the \ncode shorter and cleaner\n\n*/\n\n\n\n\nfunction Currency() {\n\n  // set currency options\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  // from our current currency option\n  const [fromCurrency, setFromCurrency] = useState()\n  // to another currency options\n  const [toCurrency, setToCurrency] = useState()\n  // then echange rate from our option to other option\n  const [exchangeRate, setExchangeRate] = useState()\n  // amount define (input)\n  const [amount, setAmount] = useState(1)\n  // Display amount in From our currency tocurrency\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n\n  // to amout -> to other option + echange rate = * \n  // opposite way same by divide\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  // fetch data from our BASE_URL convert the res as json\n  // then define each options unpacking the data\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[1] // 1 in the array = EU\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  // need to be nested in if statement otherwise fromCurrency And to Currency = not defined by compiler\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n  return (\n        <Container className=\"CurrencyRow-wrapper\">\n          <Row className=\"CurrencyRow-bg\" >\n          \n              <Col  sm={12} className=\"d-flex justify-content-center align-items-center \" >\n                <div id=\"CurrencyRow-subWrapper\" className=\"\">\n                  <CurrencyRow\n                  currencyOptions={currencyOptions}\n                  selectedCurrency={fromCurrency}\n                  onChangeCurrency={e => setFromCurrency(e.target.value)} // check your stackoverflow answer\n                  onChangeAmount={handleFromAmountChange}\n                  amount={fromAmount}\n                  />\n                  <div className=\"equals\">=</div>\n                  <CurrencyRow\n                  currencyOptions={currencyOptions}\n                  selectedCurrency={toCurrency}\n                  onChangeCurrency={e => setToCurrency(e.target.value)}\n                  onChangeAmount={handleToAmountChange}\n                  amount={toAmount}\n                  />\n                </div>\n              </Col>\n          </Row>\n        </Container>\n  );\n}\n\nexport default Currency;\n"]},"metadata":{},"sourceType":"module"}