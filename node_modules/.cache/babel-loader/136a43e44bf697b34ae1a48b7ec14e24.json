{"ast":null,"code":"var _jsxFileName = \"/home/arthur/cs/projects/reactJS/currex/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Header from './component/Header/Header';\nimport CurrencyRow from './component/CurrencyRow/CurrencyRow'; //API Exchange rates\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest';\n\nfunction App() {\n  // set currency options\n  const [currencyOptions, setCurrencyOptions] = useState([]); // from our current currency option\n\n  const [fromCurrency, setFromCurrency] = useState(); // to another currency options\n\n  const [toCurrency, setToCurrency] = useState(); // then echange rate from our option to other option\n\n  const [exchangeRate, setExchangeRate] = useState(); // amount define (input)\n\n  const [amount, setAmount] = useState(1); // Display amount in From our currency tocurrency\n\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true); // to amout -> to other option + echange rate = * \n  // opposite way same by divide\n\n  let toAmount, fromAmount;\n\n  if (amountInFromCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  } // fetch ftw\n\n\n  useEffect(() => {\n    fetch(BASE_URL).then(res => res.json()).then(data => {\n      const firstCurrency = Object.keys(data.rates)[0];\n      setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n      setFromCurrency(data.base);\n      setToCurrency(firstCurrency);\n      setExchangeRate(data.rates[firstCurrency]);\n    });\n  }, []); // need to be nested in if statement otherwise fromCurrency And to Currency = not defined by compiler\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`).then(res => res.json()).then(data => setExchangeRate(data.rates[toCurrency]));\n    }\n  }, [fromCurrency, toCurrency]);\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"CurrencyRow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"CurrencyRow-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"CurrencyRow-bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyRow, {\n    currencyOptions: currencyOptions,\n    selectedCurrency: fromCurrency,\n    onChangeCurrency: e => setFromCurrency(e.target.value) // check your stackoverflow answer\n    ,\n    onChangeAmount: handleFromAmountChange,\n    amount: fromAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"equals\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"=\"), /*#__PURE__*/React.createElement(CurrencyRow, {\n    currencyOptions: currencyOptions,\n    selectedCurrency: toCurrency,\n    onChangeCurrency: e => setToCurrency(e.target.value),\n    onChangeAmount: handleToAmountChange,\n    amount: toAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/arthur/cs/projects/reactJS/currex/src/App.js"],"names":["React","useEffect","useState","Header","CurrencyRow","BASE_URL","App","currencyOptions","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","amount","setAmount","amountInFromCurrency","setAmountInFromCurrency","toAmount","fromAmount","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","handleFromAmountChange","e","target","value","handleToAmountChange"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport './App.css';\nimport Header from './component/Header/Header'\nimport CurrencyRow from './component/CurrencyRow/CurrencyRow'\n\n//API Exchange rates\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\n\nfunction App() {\n\n  // set currency options\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  // from our current currency option\n  const [fromCurrency, setFromCurrency] = useState()\n  // to another currency options\n  const [toCurrency, setToCurrency] = useState()\n  // then echange rate from our option to other option\n  const [exchangeRate, setExchangeRate] = useState()\n  // amount define (input)\n  const [amount, setAmount] = useState(1)\n  // Display amount in From our currency tocurrency\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n\n  // to amout -> to other option + echange rate = * \n  // opposite way same by divide\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  // fetch ftw\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[0]\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  // need to be nested in if statement otherwise fromCurrency And to Currency = not defined by compiler\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n  return (\n    <div className=\"App\">\n      <Header/>\n      <div className=\"CurrencyRow\">\n        <div className=\"CurrencyRow-wrapper\">\n          <div className=\"CurrencyRow-bg\">\n          <CurrencyRow\n            currencyOptions={currencyOptions}\n            selectedCurrency={fromCurrency}\n            onChangeCurrency={e => setFromCurrency(e.target.value)} // check your stackoverflow answer\n            onChangeAmount={handleFromAmountChange}\n            amount={fromAmount}\n          />\n        <div className=\"equals\">=</div>\n          <CurrencyRow\n            currencyOptions={currencyOptions}\n            selectedCurrency={toCurrency}\n            onChangeCurrency={e => setToCurrency(e.target.value)}\n            onChangeAmount={handleToAmountChange}\n            amount={toAmount}\n          />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}