{"ast":null,"code":"var _jsxFileName = \"/home/arthur/cs/projects/reactJS/currex/src/component/CurrencyRow/Currency.js\";\nimport React, { useEffect, useState } from 'react';\nimport CurrencyRow from './CurrencyRow';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './Currency.css'; //API Exchange rates\n\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest';\n/* \nCurrency Component\nCurrency is the parent of CurrencyRow\n\nCurrency render the whole proccess of the currency conversion\n\nThe organisation of the Component is  : \n\nDefining our Currency options as useState to manipulate the state undirectly.\n\nDefining toAmount from Amount think os this line \"toAmount = amount * exchangeRate\" \nSo you understand what define amount mean \n\nFetching the data from the API URL \nUnpacking the data and distribute the options from our data\n\nThen converting amount in both way depending of the input \nI use hooks useEffect() here more about it \nHooks *** https://reactjs.org/docs/hooks-effect.html ***\n\nSince this component is the parent bootstrap modules are imported to make the \ncode shorter and cleaner\n\n*/\n\nfunction Currency() {\n  // set currency options\n  const [currencyOptions, setCurrencyOptions] = useState([]); // from our current currency option\n\n  const [fromCurrency, setFromCurrency] = useState(); // to another currency options\n\n  const [toCurrency, setToCurrency] = useState(); // then echange rate from our option to other option\n\n  const [exchangeRate, setExchangeRate] = useState(); // amount define (input)\n\n  const [amount, setAmount] = useState(1); // Display amount in From our currency tocurrency\n\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true); // to amout -> to other option + echange rate = * \n  // opposite way same by divide\n\n  let toAmount, fromAmount;\n\n  if (amountInFromCurrency) {\n    fromAmount = amount;\n    toAmount = amount * exchangeRate;\n  } else {\n    toAmount = amount;\n    fromAmount = amount / exchangeRate;\n  } // fetch data from our BASE_URL convert the res as json\n  // then define each options unpacking the data\n\n\n  useEffect(() => {\n    fetch(BASE_URL).then(res => res.json()).then(data => {\n      const firstCurrency = Object.keys(data.rates)[1]; // 1 in the array = EU\n\n      setCurrencyOptions([data.base, ...Object.keys(data.rates)]);\n      setFromCurrency(data.base);\n      setToCurrency(firstCurrency);\n      setExchangeRate(data.rates[firstCurrency]);\n    });\n  }, []); // need to be nested in if statement otherwise fromCurrency And to Currency = not defined by compiler\n\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`).then(res => res.json()).then(data => setExchangeRate(data.rates[toCurrency]));\n    }\n  }, [fromCurrency, toCurrency]);\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(true);\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value);\n    setAmountInFromCurrency(false);\n  }\n\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"CurrencyRow-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    className: \"CurrencyRow-bg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    id: \"CurrencyRow-subWrapper\",\n    sm: 12,\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(CurrencyRow, {\n    currencyOptions: currencyOptions,\n    selectedCurrency: fromCurrency,\n    onChangeCurrency: e => setFromCurrency(e.target.value) // check your stackoverflow answer\n    ,\n    onChangeAmount: handleFromAmountChange,\n    amount: fromAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"equals\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, \"=\"), /*#__PURE__*/React.createElement(CurrencyRow, {\n    currencyOptions: currencyOptions,\n    selectedCurrency: toCurrency,\n    onChangeCurrency: e => setToCurrency(e.target.value),\n    onChangeAmount: handleToAmountChange,\n    amount: toAmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }))));\n}\n\nexport default Currency;","map":{"version":3,"sources":["/home/arthur/cs/projects/reactJS/currex/src/component/CurrencyRow/Currency.js"],"names":["React","useEffect","useState","CurrencyRow","Container","Row","Col","BASE_URL","Currency","currencyOptions","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","amount","setAmount","amountInFromCurrency","setAmountInFromCurrency","toAmount","fromAmount","fetch","then","res","json","data","firstCurrency","Object","keys","rates","base","handleFromAmountChange","e","target","value","handleToAmountChange"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport CurrencyRow from './CurrencyRow'\nimport { Container, Row, Col } from 'react-bootstrap';\nimport './Currency.css'\n//API Exchange rates\nconst BASE_URL = 'https://api.exchangeratesapi.io/latest'\n\n/* \nCurrency Component\nCurrency is the parent of CurrencyRow\n\nCurrency render the whole proccess of the currency conversion\n\nThe organisation of the Component is  : \n\nDefining our Currency options as useState to manipulate the state undirectly.\n\nDefining toAmount from Amount think os this line \"toAmount = amount * exchangeRate\" \nSo you understand what define amount mean \n\nFetching the data from the API URL \nUnpacking the data and distribute the options from our data\n\nThen converting amount in both way depending of the input \nI use hooks useEffect() here more about it \nHooks *** https://reactjs.org/docs/hooks-effect.html ***\n\nSince this component is the parent bootstrap modules are imported to make the \ncode shorter and cleaner\n\n*/\n\n\n\n\nfunction Currency() {\n\n  // set currency options\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  // from our current currency option\n  const [fromCurrency, setFromCurrency] = useState()\n  // to another currency options\n  const [toCurrency, setToCurrency] = useState()\n  // then echange rate from our option to other option\n  const [exchangeRate, setExchangeRate] = useState()\n  // amount define (input)\n  const [amount, setAmount] = useState(1)\n  // Display amount in From our currency tocurrency\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\n\n  // to amout -> to other option + echange rate = * \n  // opposite way same by divide\n  let toAmount, fromAmount\n  if (amountInFromCurrency) {\n    fromAmount = amount\n    toAmount = amount * exchangeRate\n  } else {\n    toAmount = amount\n    fromAmount = amount / exchangeRate\n  }\n\n  // fetch data from our BASE_URL convert the res as json\n  // then define each options unpacking the data\n  useEffect(() => {\n    fetch(BASE_URL)\n      .then(res => res.json())\n      .then(data => {\n        const firstCurrency = Object.keys(data.rates)[1] // 1 in the array = EU\n        setCurrencyOptions([data.base, ...Object.keys(data.rates)])\n        setFromCurrency(data.base)\n        setToCurrency(firstCurrency)\n        setExchangeRate(data.rates[firstCurrency])\n      })\n  }, [])\n\n  // need to be nested in if statement otherwise fromCurrency And to Currency = not defined by compiler\n  useEffect(() => {\n    if (fromCurrency != null && toCurrency != null) {\n      fetch(`${BASE_URL}?base=${fromCurrency}&symbols=${toCurrency}`)\n        .then(res => res.json())\n        .then(data => setExchangeRate(data.rates[toCurrency]))\n    }\n  }, [fromCurrency, toCurrency])\n\n  function handleFromAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(true)\n  }\n\n  function handleToAmountChange(e) {\n    setAmount(e.target.value)\n    setAmountInFromCurrency(false)\n  }\n  return (\n        <Container className=\"CurrencyRow-wrapper\">\n          <Row className=\"CurrencyRow-bg\" >\n          \n              <Col id=\"CurrencyRow-subWrapper\" sm={12} className=\"\" >\n                <CurrencyRow\n                currencyOptions={currencyOptions}\n                selectedCurrency={fromCurrency}\n                onChangeCurrency={e => setFromCurrency(e.target.value)} // check your stackoverflow answer\n                onChangeAmount={handleFromAmountChange}\n                amount={fromAmount}\n                />\n                <div className=\"equals\">=</div>\n                <CurrencyRow\n                currencyOptions={currencyOptions}\n                selectedCurrency={toCurrency}\n                onChangeCurrency={e => setToCurrency(e.target.value)}\n                onChangeAmount={handleToAmountChange}\n                amount={toAmount}\n                />\n              </Col>\n          </Row>\n        </Container>\n  );\n}\n\nexport default Currency;\n"]},"metadata":{},"sourceType":"module"}